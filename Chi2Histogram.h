#pragma once
#include "pch.h"
#include "Util.h"
#include "Sample.h"
#include <algorithm>
#include "PROBDIST.H"
#include "R64M.hpp"
#include <math.h>

/*!
* \brief Класс, позволяющий проверять гипотезу о согласии с видом распределения. Класс вычисляет колчиество степеней свободы для 
* критерия согласия Хи-квадрат, значение статистики критерия, а также p-value. 
*/
class Chi2Histogram
{
private:
	/// \brief Размер таблицы распределения. Это поле вычисляется с помощью объекта класса Distribution (распределения).
	int size;
	/// \brief P-value, вычисляется этим классом.
	double pvalue;
	/// \brief Значение статистики критерия согласия Хи-квадрат, вычисляется этим классом.
	double chi2;
	/// \brief Количество степеней свободы для критерия согласия Хи-квадрат. Вычисляется этим классом.
	unsigned int df;
	/// \brief Отсортированный по значениям массив сгруппированой выборки. Вычисляется этим классом.
	point_emp* emp_points_sorted = nullptr;
	/// \brief Отсортированный по значениям массив ожидаемых частот распределения вместе со значениями. Вычисляется этим классом.
	point_th* th_points_sorted = nullptr;
	/// \brief Массив объединенных эмпирических частот. Вычисляется этим классом.
	/// \details Частоты объединяются по принципу применимости критерия согласия Хи-квадрат. 
	int* emp_freqs_merged = nullptr;
	/// \brief Массив объединенных ожидаемых частот. Вычисляется этим классом.
	/// \details Частоты объединяются по принципу применимости критерия согласия Хи-квадрат. 
	double* th_freqs_merged = nullptr;
	/// \brief Максимальное значение в распределении. Вычисляется этим классом.
	/// \details Используется для построения гистограммы.
	double hist_max_value = 0.;
	/// \brief Минимальное значение в распределении. Вычисляется этим классом.
	/// \details Используется для построения гистограммы.
	double hist_min_value = 0.;
	/// \brief Минимальная величина модуля разности между значениями в распределении. Вычисляется этим классом.
	/// \details Используется для построения гистограммы.
	double hist_min_dif_module = 0.;
	/// \brief Максимальная частота. Вычисляется этим классом.
	/// \details Используется для построения гистограммы. Частота берется как максимум среди эмпирических частот и 
	/// среди ожидаемых частот, округленных вверх.
	int hist_max_freq = 0.;
	/// \brief Размер выборки
	int sample_size = 0;
public:
	/*!
	* Конструктор.
	*/
	Chi2Histogram();
	/*!
	* Конструктор с выборкой и распределением.
	* \param sample_ Константная ссылка на объект типа Sample (выборка), выборка используется для нвхождения
	* эмпирических частот для вычисления статистики критерия.
	* \param distr Константная ссылка на объект типа Distribution (распределение), распределение используется для нахождения
	* ожидаемых частот для вычисления статистики критерия.
	*/
	Chi2Histogram(const Sample& sample_, const Distribution& distr);
	/*!
	* Конструктор перемещения
	*/
	Chi2Histogram(Chi2Histogram&& other);
	/*!
	* Конструктор копирования
	* \param other Константная ссылка на объект типа Chi2Histogram (другой объект этого типа).
	*/
	Chi2Histogram(const Chi2Histogram& other);
	/*!
	* Деструктор
	*/
	~Chi2Histogram();
	/*!
	* Функция, которая заполняет поля класса.
	* \param sample_ Константная ссылка на объект типа Sample (выборка), выборка используется для нвхождения
	* эмпирических частот для вычисления статистики критерия.
	* \param distr Константная ссылка на объект типа Distribution (распределение), распределение используется для нахождения
	* ожидаемых частот для вычисления статистики критерия.
	*/
	void SetData(const Sample& sample_, const Distribution& distr);
	/*!
	* Функция, возвращающая структуру типа point_emp (значение выборки с его частотой) по индексу массива.
	* \param index Индекс массива emp_points_sorted, принимает значения от 0 до n - 1, где n - размер массива значений случайной величины.
	*/
	point_emp get_emp_point(int index);
	point_th get_th_point(int index);
	void merge_freqs();
	int get_df();
	double get_pvalue();
	void calc_chi2();
	double get_chi2();

	int get_size() const;
	double get_hist_max_value() const;
	double get_hist_min_value() const;
	double get_hist_min_dif_module() const;
	int get_hist_max_freq() const;
	int get_sample_size() const;
};
