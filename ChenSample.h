#pragma once
#include "pch.h"
#include "Sample.h"
#include "R64M.hpp"

/*!
	\brief Класс-наследник класса Sample, которые переопределяет виртуальную фукнцию, генерирующую случайную величину. 
	Позволяет генерировать выборку случайной величины методом Чена.
*/
class ChenSample : public Sample {
private:
	/*!
	* Функция, которая позволяет генерировать случайную величину из дискретного табличного распределения методом Чена. Переопределяется этим классом.
	* Генерирует индекс для массива значений случаной величины.
	*/ 
	unsigned int simulate_rv() override;

	/// \brief Параметр для метода Чена. Должен быть в пределах [1;20]
	unsigned int m;

	/// \brief Указатель на массив, который необходим для метода Чена, массив имеет длину m.
	double* r;

	/// \brief Указатель на массив накопленных вероятностей, необходим для метода Чена.
	double* s;

public:
	/*!
	* Конструктор класса.
	* \param distr Константная ссылка на объект типа Distribution (распределение), распределение используется для генерации случайной величины.
	* \param m_ Параметр для метода Чена.
	*/
	ChenSample(const Distribution& distr, int m_);
	/*!
	* Конструктор копирования.
	* \param other Константная ссылка на объект типа ChenSample (другой объект этого типа).
	*/
	ChenSample(const ChenSample& other);
	/*!
	* Метод, позволяющий менять этот объект с объектом этого же типа.
	* \param other Ссылка на объект типа ChenSample (другой объект этого типа).
	*/
	void swap(ChenSample& other);
	/*!
	* Оператор приравнивания.
	* \param other Ссылка на объект типа ChenSample (другой объект этого типа).
	*/
	ChenSample& operator=(ChenSample& other);
	/*!
	* Деструктор.
	*/
	~ChenSample() override;
	/*!
	* Функция, возвращающая значение параметра m.
	*/
	int get_m() const;
	/*!
	* Функция, возвращающая значение элемента массива r с индексом index.
	* \param index Индекс массива r.
	*/
	double get_r_ith_value(int index) const;
	/*!
	* Функция, возвращающая значение элемента массива накопленных вероятностей s с индексом index.
	* \param index Индекс массива s.
	*/
	double get_s_ith_value(int index) const;
};
